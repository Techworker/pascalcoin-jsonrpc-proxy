module.exports = {
    server: {
        host: '0.0.0.0',
        port: 8080,
        path: '/',
    },
    basicAuth: {
        enabled: false,
        users: {
            'techworker': 'test'
        }
    },
    ssl: {
        enabled: false,
        key: 'key.pem',
        cert: 'cert.pem'
    },
    nodes: ['http://127.0.0.1:4003'],
    methods: {
        addnode: true,
        getaccount: true,
        getwalletaccounts: true,
        getwalletaccountscount: true,
        getwalletpubkeys: true,
        getwalletpubkey: true,
        getwalletcoins: true,
        getblock: true,
        getblocks: true,
        getblockcount: true,
        getblockoperation: true,
        getblockoperations: true,
        getaccountoperations: true,
        getpendings: true,
        getpendingscount: true,
        findoperation: true,
        findaccounts: true,
        sendto: true,
        changekey: true,
        changekeys: true,
        listaccountforsale: true,
        delistaccountforsale: true,
        buyaccount: true,
        changeaccountinfo: true,
        signsendto: true,
        signchangekey: true,
        signlistaccountforsale: true,
        signdelistaccountforsale: true,
        signbuyaccount: true,
        signchangeaccountinfo: true,
        operationsinfo: true,
        executeoperations: true,
        nodestatus: true,
        encodepubkey: true,
        decodepubkey: true,
        payloadencrypt: true,
        payloaddecrypt: true,
        getconnections: true,
        addnewkey: true,
        lock: true,
        unlock: true,
        setwalletpassword: true,
        stopnode: true,
        startnode: true,
        signmessage: true,
        verifysign: true,
        multioperationaddoperation: true,
        multioperationsignoffline: true,
        multioperationsignonline: true,
        operationsdelete: true,
    },
    hooks: {
        before: {
            // will be called for every request, BEFORE the hook of the method itself
            '*': function(method, params) {
                return params;
            },

            findaccounts: function(params) {
                if(params.max !== undefined && params.max > 100) {
                    throw new Error("Invalid MAX value, allowed 100");
                }

                return params;
            }
        },
        after: {
            // will be called for every request, BEFORE the hook of the method itself
            '*': function(method, data) {
                return data;
            },

            nodestatus: function(data) {
                delete data.result.nodeservers;
                return data;
            }
        }
    }
};
